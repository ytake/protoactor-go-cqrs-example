// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package mysql

import (
	"context"
)

const addUser = `-- name: AddUser :exec
INSERT INTO users (id, name, email)
VALUES (?, ?, ?)
`

type AddUserParams struct {
	ID    string
	Name  string
	Email string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser, arg.ID, arg.Name, arg.Email)
	return err
}

const findRegistrationUser = `-- name: FindRegistrationUser :one
SELECT id, name, email
FROM users
WHERE email = ?
`

type FindRegistrationUserRow struct {
	ID    string
	Name  string
	Email string
}

func (q *Queries) FindRegistrationUser(ctx context.Context, email string) (FindRegistrationUserRow, error) {
	row := q.db.QueryRowContext(ctx, findRegistrationUser, email)
	var i FindRegistrationUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getRegistrationUsers = `-- name: GetRegistrationUsers :many
SELECT id, name, email, created_at
FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetRegistrationUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrationUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
